/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIngressosPistaArgs } from "./CreateIngressosPistaArgs";
import { UpdateIngressosPistaArgs } from "./UpdateIngressosPistaArgs";
import { DeleteIngressosPistaArgs } from "./DeleteIngressosPistaArgs";
import { IngressosPistaFindManyArgs } from "./IngressosPistaFindManyArgs";
import { IngressosPistaFindUniqueArgs } from "./IngressosPistaFindUniqueArgs";
import { IngressosPista } from "./IngressosPista";
import { IngressosPistaService } from "../ingressosPista.service";

@graphql.Resolver(() => IngressosPista)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class IngressosPistaResolverBase {
  constructor(
    protected readonly service: IngressosPistaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IngressosPista",
    action: "read",
    possession: "any",
  })
  async _ingressosPistasMeta(
    @graphql.Args() args: IngressosPistaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IngressosPista])
  @nestAccessControl.UseRoles({
    resource: "IngressosPista",
    action: "read",
    possession: "any",
  })
  async ingressosPistas(
    @graphql.Args() args: IngressosPistaFindManyArgs
  ): Promise<IngressosPista[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IngressosPista, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IngressosPista",
    action: "read",
    possession: "own",
  })
  async ingressosPista(
    @graphql.Args() args: IngressosPistaFindUniqueArgs
  ): Promise<IngressosPista | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IngressosPista)
  @nestAccessControl.UseRoles({
    resource: "IngressosPista",
    action: "create",
    possession: "any",
  })
  async createIngressosPista(
    @graphql.Args() args: CreateIngressosPistaArgs
  ): Promise<IngressosPista> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IngressosPista)
  @nestAccessControl.UseRoles({
    resource: "IngressosPista",
    action: "update",
    possession: "any",
  })
  async updateIngressosPista(
    @graphql.Args() args: UpdateIngressosPistaArgs
  ): Promise<IngressosPista | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IngressosPista)
  @nestAccessControl.UseRoles({
    resource: "IngressosPista",
    action: "delete",
    possession: "any",
  })
  async deleteIngressosPista(
    @graphql.Args() args: DeleteIngressosPistaArgs
  ): Promise<IngressosPista | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
